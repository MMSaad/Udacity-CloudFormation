Description: >
  Mustafa Saad , Udacity 2019

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR: 
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String

Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: yes
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: yes
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
        VpcId: !Ref VPC
        Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Public Routes
  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow web access to web servers
      VpcId:
          Ref: VPC   
      SecurityGroupIngress:
      -   IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      -   IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 50
      HealthCheckPath: "/"
      HealthCheckPort: 80
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Name: "WebTargetGroup"
      Matcher:
        HttpCode: "200"
      Port: 80
      Protocol: "HTTP"
      TargetType: "instance"
      UnhealthyThresholdCount: 5
      VpcId: 
        Ref: VPC
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Name: "WebLoadBalancer"
      Scheme: "internet-facing"
      SecurityGroups: 
        [Ref: WebSecurityGroup]
      Subnets: 
        [!Ref PublicSubnet1,!Ref PublicSubnet2]
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: "forward"
          TargetGroupArn: 
            Ref: LoadBalancerTargetGroup
      LoadBalancerArn: 
        Ref: LoadBalancer
      Port: 80
      Protocol: "HTTP"
  LaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      UserData:
              Fn::Base64: 
                  !Sub |
                      #!/bin/bash
                      sudo yum -y update 
                      sudo yum -y install httpd
                      sudo apachectl start
                      cd /var/www/html
                      sudo aws s3 cp s3://geek-inside-1/udacity.zip .
                      sudo unzip -o udacity.zip
      ImageId: ami-0a85857bfc5345c38
      IamInstanceProfile: udagram-dev-service-role
      KeyName: DemoKey
      SecurityGroups:  [Ref: WebSecurityGroup]
      InstanceType: "t3.micro"
      KeyName: DemoKey
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
                VolumeSize: '10'
  ASG: 
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: LaunchConfig
    Properties: 
      AvailabilityZones: 
        [!Select [ 0, !GetAZs '' ],!Select [ 1, !GetAZs '' ]]
      LaunchConfigurationName: 
        Ref: LaunchConfig
      MinSize: "1"
      MaxSize: "4"
      VPCZoneIdentifier: [!Ref PublicSubnet1,!Ref PublicSubnet2]
      TargetGroupARNs: 
        [Ref: LoadBalancerTargetGroup]
      MetricsCollection: 
        - 
          Granularity: "1Minute"
          Metrics: 
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Environment
          Value: Production
          PropagateAtLaunch: "true"
        - Key: Purpose
          Value: WebServerGroup
          PropagateAtLaunch: "false"

Outputs:
  VPC: 
    Description: Web VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID
